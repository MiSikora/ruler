{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Ruler \u00b6 Distance measurements library for Kotlin and Android. TLDR \u00b6 Define a distance and manipulate it. // Distance is dimensionless. val distanceFromMeters : Distance = Distance . ofMeters ( 100 ) val distanceFromYards : Distance = Distance . ofYards ( 50 ) // Length has a unit attached to it. val metersLength : Length < SiLengthUnit . Meter > = distanceFromMeters . toLength ( SiLengthUnit . Meter ) val inchesLength : Length < ImperialLengthUnit . Inch > = distanceFromMeters . toLength ( ImperialLengthUnit . Inch ) // metersLength and inchesLength represent the same distance but with a different units attached to them. check ( metersLength - inchesLength == Length . ofMeters ( 0 )) Android artifact allows to show a user formatted distances and lengths using appropriate Locale if available. fun main () { val distance = Distance . ofMeters ( 100 ) val length = distance . toLength ( Meter ) // Assumes en_US Locale on a device. // Prints \"109yd 1ft 1in\". val humanReadableDistance : String = distance . format () // Prints \"100.00m\". val humanReadableLength : String = length . format () } Requirements \u00b6 Ruler requires Java 8 bytecode support. You can enable it with the following configuration in a build.gradle file. android { compileOptions { sourceCompatibility JavaVersion . VERSION_1_8 targetCompatibility JavaVersion . VERSION_1_8 } kotlinOptions { jvmTarget = \"1.8\" } } Get Ruler \u00b6 Ruler is published to Maven Central Repository . repositories { mavenCentral () } dependencies { implementation \"io.mehow.ruler:ruler:2.0.2\" } Snapshots of the development version are available on Sonatype\u2019s snapshots repository . Here is the list of all available artifacts that Ruler library provides. io.mehow.ruler:ruler:2.0.2 : Core of the library. Defines classes and interfaces that represent distances and gives capabilities to format the for a user in a human-readable way. io.mehow.ruler:ruler-android:2.0.2 : Provides formatting behaviour that can be installed at runtime in the core library. io.mehow.ruler:ruler-android-startup:2.0.2 : Uses Jetpack Startup library to initialize Ruler with Android context formatting. Attribution \u00b6 Logo icon made by Freepik from www.flaticon.com . License \u00b6 Copyright 2020 Micha\u0142 Sikora Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Quick start"},{"location":"#ruler","text":"Distance measurements library for Kotlin and Android.","title":"Ruler"},{"location":"#tldr","text":"Define a distance and manipulate it. // Distance is dimensionless. val distanceFromMeters : Distance = Distance . ofMeters ( 100 ) val distanceFromYards : Distance = Distance . ofYards ( 50 ) // Length has a unit attached to it. val metersLength : Length < SiLengthUnit . Meter > = distanceFromMeters . toLength ( SiLengthUnit . Meter ) val inchesLength : Length < ImperialLengthUnit . Inch > = distanceFromMeters . toLength ( ImperialLengthUnit . Inch ) // metersLength and inchesLength represent the same distance but with a different units attached to them. check ( metersLength - inchesLength == Length . ofMeters ( 0 )) Android artifact allows to show a user formatted distances and lengths using appropriate Locale if available. fun main () { val distance = Distance . ofMeters ( 100 ) val length = distance . toLength ( Meter ) // Assumes en_US Locale on a device. // Prints \"109yd 1ft 1in\". val humanReadableDistance : String = distance . format () // Prints \"100.00m\". val humanReadableLength : String = length . format () }","title":"TLDR"},{"location":"#requirements","text":"Ruler requires Java 8 bytecode support. You can enable it with the following configuration in a build.gradle file. android { compileOptions { sourceCompatibility JavaVersion . VERSION_1_8 targetCompatibility JavaVersion . VERSION_1_8 } kotlinOptions { jvmTarget = \"1.8\" } }","title":"Requirements"},{"location":"#get-ruler","text":"Ruler is published to Maven Central Repository . repositories { mavenCentral () } dependencies { implementation \"io.mehow.ruler:ruler:2.0.2\" } Snapshots of the development version are available on Sonatype\u2019s snapshots repository . Here is the list of all available artifacts that Ruler library provides. io.mehow.ruler:ruler:2.0.2 : Core of the library. Defines classes and interfaces that represent distances and gives capabilities to format the for a user in a human-readable way. io.mehow.ruler:ruler-android:2.0.2 : Provides formatting behaviour that can be installed at runtime in the core library. io.mehow.ruler:ruler-android-startup:2.0.2 : Uses Jetpack Startup library to initialize Ruler with Android context formatting.","title":"Get Ruler"},{"location":"#attribution","text":"Logo icon made by Freepik from www.flaticon.com .","title":"Attribution"},{"location":"#license","text":"Copyright 2020 Micha\u0142 Sikora Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"changelog/","text":"Changelog \u00b6 All notable changes to this project will be documented in this document. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . Unreleased \u00b6 Changed \u00b6 Upgrade to Kotlin 1.6.10 . Upgrade to Startup 1.1.0 . 2.0.2 - 2021-06-27 \u00b6 Changed \u00b6 Upgrade to Kotlin 1.5.20 . 2.0.1 - 2021-05-04 \u00b6 Changed \u00b6 Upgrade to Kotlin 1.5.0 . 2.0.0 - 2020-12-31 \u00b6 Added \u00b6 Distance.format() and Length.format() that do not require specifying android.content.Context . This a part of a large overhaul of this library. See Changed section for more information. Distance.Epsilon constant that represents smallest possible change in of Distance . LengthUnits.bounds property to the public API. It holds min and max distances that only that unit can represent as a natural count of self. Length.withFittingUnit(units, fitter) that selects the best unit for a length using supplied units and fitting algorithm. A complementary UnitFitter interface is added along with InRangeUnitFitter and LogDistanceUnitFitter implementations. New SI units \u2013 centimeters, decimeters, decameters and hectometers. Length.roundDown() to get a length with whole unit count rounded towards 0. Measure class to model a distance normalized to a unit. io.mehow.ruler:android-ruler-startup artifact to initialize Ruler automatically with Android formatting rules. Changed \u00b6 Complete redesign of the formatting part of this library. Formatting is now a part of the JVM io.mehow.ruler:ruler artifacts. It allows to plug different formatting contexts such as the one from Android. io.mehow.ruler:ruler-android artifact is now much smaller and provides only default implementations that can be enabled at runtime. As a part of this redesign most of formatting classes are moved to io.mehow.ruler.format package. For more details check the API documentation . Added one nanometer to Distance.Min . This change was made in order to make Distance.abs() operation safe. Distance and length formatting use better mechanisms. Instead of custom parsing it relies on java.text or android.icu packages. Length.measure is now of Measure type. ImperialLengthFormatter rounds smallest unit part instead of dropping the fraction. Removed \u00b6 Duplicated Android resources. Formatting relies now on a single pattern and translated units. Android resource for formatting negative imperial lengths. It is now handled automatically by generic formatting mechanism. Ruler.removeConverter() in favour of Length.removeConverterFactory() . Length.withAutoUnit() in favour of Length.withFittingUnit() with default arguments. FlooredLengthFormatter and floored formatting mechanism. Formatting with a custom fractional precision should be used instead. Fixed \u00b6 LengthUnit returning false-negative when negative distance was checked if it is contained in a unit. 1.0.0 - 2020-12-28 \u00b6 Added \u00b6 AutoLengthFormatter class. Use it to format lengths using resources defined in the library based on a unit. FlooredLengthFormatter class. Use it to floor a length unit quantities and format them using resources defined in the library. AutoFitLengthConverter class. Use it to convert lengths to different lengths a best fitting units based on Length.withAutoUnit() and unit coercion. LengthFormatter.Factory interface. Use it to install custom formatters in Ruler . LengthConverter.Factory interface. Use it to install custom converters in Ruler . Distance.abs() and Length.abs() methods. Ruler implements now LengthConverter and LengthFormatter . Changed \u00b6 Distance and Length throw now ArithmeticException in case of failures due to overflows or math operations. Distance.exactTotalMeters property name to meters . LengthUnit is no longer an interface. It is now a sealed class with two implementations \u2013 SiLengthUnit and ImperialLengthUnit . LengthUnit is no longer Iterable . It exposes now units property. Custom LengthFormatter s must be now installed using LengthFormatter.Factory interface and Ruler.addFormatterFactory() method. LengthFormatter to a functional interface. LengthFormatter can no longer return null . Length no longer changes units automatically based on Locale during formatting. Order of arguments in LengthFormatter.format() method. ImperialLengthFormatter substitutes ImperialDistanceFormatter . It offers a more unified API without bloated configurability. Custom LengthConverter s must be now installed using LengthConverter.Factory interface and Ruler.addConverterFactory() method. LengthConverter to a functional interface. LengthConverter can no longer return null . Upgrade to Kotlin 1.4.21 . Removed \u00b6 Explicit Java support with @Jvm* annotations. Distance.metersPart and Distance.nanosPart properties. Distance.create(meters, nanometers) method. Distance.format() and Distance.formatFloored() overloads that accept LengthUnit . Ruler.flooredFormatters property. Flooring is now available solely via FlooredLengthFormatter . Fixed \u00b6 Wrong lower meter bound of Miles unit. Wrong name of an argument in Length.div() methods. Imperial formatting not handling negative distances. 0.6.0 - 2020-11-11 \u00b6 Added \u00b6 meterRatio property to LengthUnit interface. contains function to LengthUnit interface. This allows to use in sugar syntax. Changed \u00b6 io.mehow.ruler:android to io.mehow.ruler:ruler-android artifact. Changelog format follows now Keep a Changelog format. Format is applied retroactively to this file. Length.measureLength property to measure . Distance.min , Distance.zero and Distance.max respectively to Distance.Min , Distance.Zero and Distance.Max . They are now available as fields from Java. ImperialDistanceFormatter.basic and ImperialDistanceFormatter.full to ImperialDistanceFormatter.Basic and ImperialDistanceFormatter.Full respectively. Upgrade to Kotlin 1.4.10 . Removed \u00b6 toDistance() methods from LengthUnit interface. -Xjvm-default=enable compiler argument is no longer required. toMeasuredLength() function from LengthUnit interface. appliesRangeTo() function from LengthUnit interface. 0.5.3 - 2020-06-14 \u00b6 Changed \u00b6 Upgrade to Kotlin 1.3.72 . Fixed \u00b6 Long to double conversion when computing distances. 0.5.2 - 2020-04-15 \u00b6 Added \u00b6 Arabic language support. Fixed \u00b6 Fix a bug with no inches displayed for 0 length. 0.5.1 - 2020-03-01 \u00b6 Removed \u00b6 Remove totalMeters property from Distance that approximates it. Fixed \u00b6 Fix wrong unit displayed for feet. 0.5.0 - 2020-02-29 \u00b6 Added \u00b6 Support for floored formatting of any length units. Allow to set globally if UK should use imperial or SI units. 0.4.1 - 2020-02-07 \u00b6 Added \u00b6 Support for negative distances. Support for floored SI unit lengths formatting. It displays only whole parts of a unit. 0.4.0 - 2020-02-05 \u00b6 Added \u00b6 Ruler class as a central point for distance and length formatting. Imperial unit formatter. It allows to display measurements in a imperial-friendly format. For example 105ft 12in . 0.3.2 2020-02-03 \u00b6 Fixed \u00b6 Fix issue with high precision Float and Double multiplication. 0.3.1 - 2020-02-03 \u00b6 Fixed \u00b6 Make library JDK 7 compatible. 0.3.0 - 2020-02-03 \u00b6 Added \u00b6 Add Distance (old Length ) formatter for Android. Add basic math operators like multiplication and division. Add Double factories to Distance (old Length ). Changed \u00b6 Swap names of Distance and Length classes. Use Long as an underlying Distance primitive. It is more suitable for application that have UI interaction and distance of ~975 light years seems sufficient for most day-to-day applications. 0.2.0 - 2020-02-03 \u00b6 Changed \u00b6 DistanceUnitCoercer changed to DistanceConverter . Distance constructor is no longer public. length in Distance is no longer public. meters and nanometers properties renamed respectively to metersPart and nanometersParts in Length class. 0.1.0 - 2020-02-02 \u00b6 Initial release.","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this document. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog/#unreleased","text":"","title":"Unreleased"},{"location":"changelog/#changed","text":"Upgrade to Kotlin 1.6.10 . Upgrade to Startup 1.1.0 .","title":"Changed"},{"location":"changelog/#202-2021-06-27","text":"","title":"2.0.2 - 2021-06-27"},{"location":"changelog/#changed_1","text":"Upgrade to Kotlin 1.5.20 .","title":"Changed"},{"location":"changelog/#201-2021-05-04","text":"","title":"2.0.1 - 2021-05-04"},{"location":"changelog/#changed_2","text":"Upgrade to Kotlin 1.5.0 .","title":"Changed"},{"location":"changelog/#200-2020-12-31","text":"","title":"2.0.0 - 2020-12-31"},{"location":"changelog/#added","text":"Distance.format() and Length.format() that do not require specifying android.content.Context . This a part of a large overhaul of this library. See Changed section for more information. Distance.Epsilon constant that represents smallest possible change in of Distance . LengthUnits.bounds property to the public API. It holds min and max distances that only that unit can represent as a natural count of self. Length.withFittingUnit(units, fitter) that selects the best unit for a length using supplied units and fitting algorithm. A complementary UnitFitter interface is added along with InRangeUnitFitter and LogDistanceUnitFitter implementations. New SI units \u2013 centimeters, decimeters, decameters and hectometers. Length.roundDown() to get a length with whole unit count rounded towards 0. Measure class to model a distance normalized to a unit. io.mehow.ruler:android-ruler-startup artifact to initialize Ruler automatically with Android formatting rules.","title":"Added"},{"location":"changelog/#changed_3","text":"Complete redesign of the formatting part of this library. Formatting is now a part of the JVM io.mehow.ruler:ruler artifacts. It allows to plug different formatting contexts such as the one from Android. io.mehow.ruler:ruler-android artifact is now much smaller and provides only default implementations that can be enabled at runtime. As a part of this redesign most of formatting classes are moved to io.mehow.ruler.format package. For more details check the API documentation . Added one nanometer to Distance.Min . This change was made in order to make Distance.abs() operation safe. Distance and length formatting use better mechanisms. Instead of custom parsing it relies on java.text or android.icu packages. Length.measure is now of Measure type. ImperialLengthFormatter rounds smallest unit part instead of dropping the fraction.","title":"Changed"},{"location":"changelog/#removed","text":"Duplicated Android resources. Formatting relies now on a single pattern and translated units. Android resource for formatting negative imperial lengths. It is now handled automatically by generic formatting mechanism. Ruler.removeConverter() in favour of Length.removeConverterFactory() . Length.withAutoUnit() in favour of Length.withFittingUnit() with default arguments. FlooredLengthFormatter and floored formatting mechanism. Formatting with a custom fractional precision should be used instead.","title":"Removed"},{"location":"changelog/#fixed","text":"LengthUnit returning false-negative when negative distance was checked if it is contained in a unit.","title":"Fixed"},{"location":"changelog/#100-2020-12-28","text":"","title":"1.0.0 - 2020-12-28"},{"location":"changelog/#added_1","text":"AutoLengthFormatter class. Use it to format lengths using resources defined in the library based on a unit. FlooredLengthFormatter class. Use it to floor a length unit quantities and format them using resources defined in the library. AutoFitLengthConverter class. Use it to convert lengths to different lengths a best fitting units based on Length.withAutoUnit() and unit coercion. LengthFormatter.Factory interface. Use it to install custom formatters in Ruler . LengthConverter.Factory interface. Use it to install custom converters in Ruler . Distance.abs() and Length.abs() methods. Ruler implements now LengthConverter and LengthFormatter .","title":"Added"},{"location":"changelog/#changed_4","text":"Distance and Length throw now ArithmeticException in case of failures due to overflows or math operations. Distance.exactTotalMeters property name to meters . LengthUnit is no longer an interface. It is now a sealed class with two implementations \u2013 SiLengthUnit and ImperialLengthUnit . LengthUnit is no longer Iterable . It exposes now units property. Custom LengthFormatter s must be now installed using LengthFormatter.Factory interface and Ruler.addFormatterFactory() method. LengthFormatter to a functional interface. LengthFormatter can no longer return null . Length no longer changes units automatically based on Locale during formatting. Order of arguments in LengthFormatter.format() method. ImperialLengthFormatter substitutes ImperialDistanceFormatter . It offers a more unified API without bloated configurability. Custom LengthConverter s must be now installed using LengthConverter.Factory interface and Ruler.addConverterFactory() method. LengthConverter to a functional interface. LengthConverter can no longer return null . Upgrade to Kotlin 1.4.21 .","title":"Changed"},{"location":"changelog/#removed_1","text":"Explicit Java support with @Jvm* annotations. Distance.metersPart and Distance.nanosPart properties. Distance.create(meters, nanometers) method. Distance.format() and Distance.formatFloored() overloads that accept LengthUnit . Ruler.flooredFormatters property. Flooring is now available solely via FlooredLengthFormatter .","title":"Removed"},{"location":"changelog/#fixed_1","text":"Wrong lower meter bound of Miles unit. Wrong name of an argument in Length.div() methods. Imperial formatting not handling negative distances.","title":"Fixed"},{"location":"changelog/#060-2020-11-11","text":"","title":"0.6.0 - 2020-11-11"},{"location":"changelog/#added_2","text":"meterRatio property to LengthUnit interface. contains function to LengthUnit interface. This allows to use in sugar syntax.","title":"Added"},{"location":"changelog/#changed_5","text":"io.mehow.ruler:android to io.mehow.ruler:ruler-android artifact. Changelog format follows now Keep a Changelog format. Format is applied retroactively to this file. Length.measureLength property to measure . Distance.min , Distance.zero and Distance.max respectively to Distance.Min , Distance.Zero and Distance.Max . They are now available as fields from Java. ImperialDistanceFormatter.basic and ImperialDistanceFormatter.full to ImperialDistanceFormatter.Basic and ImperialDistanceFormatter.Full respectively. Upgrade to Kotlin 1.4.10 .","title":"Changed"},{"location":"changelog/#removed_2","text":"toDistance() methods from LengthUnit interface. -Xjvm-default=enable compiler argument is no longer required. toMeasuredLength() function from LengthUnit interface. appliesRangeTo() function from LengthUnit interface.","title":"Removed"},{"location":"changelog/#053-2020-06-14","text":"","title":"0.5.3 - 2020-06-14"},{"location":"changelog/#changed_6","text":"Upgrade to Kotlin 1.3.72 .","title":"Changed"},{"location":"changelog/#fixed_2","text":"Long to double conversion when computing distances.","title":"Fixed"},{"location":"changelog/#052-2020-04-15","text":"","title":"0.5.2 - 2020-04-15"},{"location":"changelog/#added_3","text":"Arabic language support.","title":"Added"},{"location":"changelog/#fixed_3","text":"Fix a bug with no inches displayed for 0 length.","title":"Fixed"},{"location":"changelog/#051-2020-03-01","text":"","title":"0.5.1 - 2020-03-01"},{"location":"changelog/#removed_3","text":"Remove totalMeters property from Distance that approximates it.","title":"Removed"},{"location":"changelog/#fixed_4","text":"Fix wrong unit displayed for feet.","title":"Fixed"},{"location":"changelog/#050-2020-02-29","text":"","title":"0.5.0 - 2020-02-29"},{"location":"changelog/#added_4","text":"Support for floored formatting of any length units. Allow to set globally if UK should use imperial or SI units.","title":"Added"},{"location":"changelog/#041-2020-02-07","text":"","title":"0.4.1 - 2020-02-07"},{"location":"changelog/#added_5","text":"Support for negative distances. Support for floored SI unit lengths formatting. It displays only whole parts of a unit.","title":"Added"},{"location":"changelog/#040-2020-02-05","text":"","title":"0.4.0 - 2020-02-05"},{"location":"changelog/#added_6","text":"Ruler class as a central point for distance and length formatting. Imperial unit formatter. It allows to display measurements in a imperial-friendly format. For example 105ft 12in .","title":"Added"},{"location":"changelog/#032-2020-02-03","text":"","title":"0.3.2 2020-02-03"},{"location":"changelog/#fixed_5","text":"Fix issue with high precision Float and Double multiplication.","title":"Fixed"},{"location":"changelog/#031-2020-02-03","text":"","title":"0.3.1 - 2020-02-03"},{"location":"changelog/#fixed_6","text":"Make library JDK 7 compatible.","title":"Fixed"},{"location":"changelog/#030-2020-02-03","text":"","title":"0.3.0 - 2020-02-03"},{"location":"changelog/#added_7","text":"Add Distance (old Length ) formatter for Android. Add basic math operators like multiplication and division. Add Double factories to Distance (old Length ).","title":"Added"},{"location":"changelog/#changed_7","text":"Swap names of Distance and Length classes. Use Long as an underlying Distance primitive. It is more suitable for application that have UI interaction and distance of ~975 light years seems sufficient for most day-to-day applications.","title":"Changed"},{"location":"changelog/#020-2020-02-03","text":"","title":"0.2.0 - 2020-02-03"},{"location":"changelog/#changed_8","text":"DistanceUnitCoercer changed to DistanceConverter . Distance constructor is no longer public. length in Distance is no longer public. meters and nanometers properties renamed respectively to metersPart and nanometersParts in Length class.","title":"Changed"},{"location":"changelog/#010-2020-02-02","text":"Initial release.","title":"0.1.0 - 2020-02-02"},{"location":"releasing/","text":"Releasing \u00b6 Versioning \u00b6 Run the prepare release script and bump the desirable version part. If there are no errors git push && git push --tags . Wait for the CI server to upload the artifacts. Visit Sonatype Nexus and promote the artifacts. Documentation updates \u00b6 Website documentation lives under /docs directory and is deployed with MkDocs using Material Theme . A new site is built and published for latest commits on the trunk branch. If you want to test the website locally before pushing changes you need to follow these steps. Make sure you have Python 3 and pip installed. $ python --version Python 3 .8.5 $ pip --version pip 20 .2.4 Install MkDocs and Material Theme. $ pip install mkdocs mkdocs-material $ mkdocs --version mkdocs, version 1 .1.2 Run the site locally. $ mkdocs serve INFO - Building documentation... INFO - Cleaning site directory INFO - Documentation built in 0 .73 seconds [ I 201026 22 :51:56 server:335 ] Serving on http://127.0.0.1:8000 INFO - Serving on http://127.0.0.1:8000","title":"Releasing"},{"location":"releasing/#releasing","text":"","title":"Releasing"},{"location":"releasing/#versioning","text":"Run the prepare release script and bump the desirable version part. If there are no errors git push && git push --tags . Wait for the CI server to upload the artifacts. Visit Sonatype Nexus and promote the artifacts.","title":"Versioning"},{"location":"releasing/#documentation-updates","text":"Website documentation lives under /docs directory and is deployed with MkDocs using Material Theme . A new site is built and published for latest commits on the trunk branch. If you want to test the website locally before pushing changes you need to follow these steps. Make sure you have Python 3 and pip installed. $ python --version Python 3 .8.5 $ pip --version pip 20 .2.4 Install MkDocs and Material Theme. $ pip install mkdocs mkdocs-material $ mkdocs --version mkdocs, version 1 .1.2 Run the site locally. $ mkdocs serve INFO - Building documentation... INFO - Cleaning site directory INFO - Documentation built in 0 .73 seconds [ I 201026 22 :51:56 server:335 ] Serving on http://127.0.0.1:8000 INFO - Serving on http://127.0.0.1:8000","title":"Documentation updates"},{"location":"user-guide/","text":"User guide \u00b6 Coming soon!","title":"User guide"},{"location":"user-guide/#user-guide","text":"Coming soon!","title":"User guide"}]}